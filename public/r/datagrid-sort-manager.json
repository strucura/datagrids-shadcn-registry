{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datagrid-sort-manager",
  "type": "registry:component",
  "title": "DataGrid Sort Manager",
  "description": "Sort Manager for your DataGrid",
  "dependencies": [
    "@strucura/datagrids-headless-react",
    "lucide-react",
    "@dnd-kit/sortable",
    "@dnd-kit/core",
    "@dnd-kit/utilities",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-popover",
    "@radix-ui/react-select",
    "lucide-react",
    "@dnd-kit/core",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "@strucura/datagrids-headless-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "select",
    "https://raw.githubusercontent.com/strucura/datagrids-shadcn-registry/refs/heads/master/public/r/datagrid-sortable-item.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/SortManager/SortManager.tsx",
      "content": "\"use client\"\n\nimport React, { JSX, useState, useMemo, useEffect } from 'react';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/new-york/ui/popover';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/new-york/ui/select';\nimport { Plus, SortDesc, Trash, Check } from 'lucide-react';\nimport { DndContext, DragEndEvent } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { SortableItem } from '@/registry/new-york/ui/sortable-item';\nimport {SortSchema, SortOperator, useDataGridContext} from '@strucura/datagrids-headless-react';\n\nexport default function SortManager(): JSX.Element {\n    const [localSorts, setLocalSorts] = useState<SortSchema[]>([]);\n    const [isOpen, setIsOpen] = useState(false);\n    const { columns, sorts, setSorts } = useDataGridContext<unknown>();\n\n    useEffect(() => {\n        if (isOpen) {\n            setLocalSorts(sorts);\n        }\n    }, [isOpen, sorts]);\n\n    const eligibleColumns = useMemo(() => {\n        const sortedAliases = localSorts.map(sort => sort.alias);\n        return columns\n            .map(column => column.alias)\n            .filter(alias => !sortedAliases.includes(alias));\n    }, [columns, localSorts]);\n\n    const handleAddSort = () => {\n        const newSort = { alias: eligibleColumns[0], sort_operator: SortOperator.ASC };\n        setLocalSorts([...localSorts, newSort]);\n    };\n\n    const handleClearSorts = () => {\n        setLocalSorts([]);\n        setSorts([]);\n    };\n\n    const handleApplySorts = () => {\n        setSorts(localSorts.filter(sort => sort.alias !== ''));\n        setIsOpen(false);\n    };\n\n    const handleSortChange = (index: number, alias: string, sort_operator: SortOperator) => {\n        const newSorts = [...localSorts];\n        newSorts[index] = { alias, sort_operator };\n        setLocalSorts(newSorts);\n    };\n\n    const handleRemoveSort = (index: number) => {\n        setLocalSorts(localSorts.filter((_, i) => i !== index));\n    };\n\n    const handleDragEnd = (event: DragEndEvent) => {\n        const { active, over } = event;\n        if (active.id !== over?.id) {\n            setLocalSorts((items) => {\n                const oldIndex = items.findIndex((sort) => sort.alias === active.id);\n                const newIndex = items.findIndex((sort) => sort.alias === over?.id);\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n    };\n\n    return (\n        <Popover open={isOpen} onOpenChange={setIsOpen}>\n            <PopoverTrigger asChild>\n                <Button variant=\"outline\" className=\"ml-auto relative\">\n                    Sort{sorts.length > 0 && (\n                    <span className=\"text-[11px] bg-gray-200 text-gray-600 rounded px-1\">\n                            {sorts.length}\n                        </span>\n                )}\n                    <SortDesc />\n                </Button>\n            </PopoverTrigger>\n            <PopoverContent\n                className=\"flex max-h-[350px] w-[500px] min-w-[500px] origin-[--radix-popover-content-transform-origin] flex-col gap-3.5 overflow-y-auto p-4\"\n                align=\"start\"\n            >\n                <div className=\"flex justify-end items-center border-b pb-4 mb-2 space-x-2\">\n                    <Button onClick={handleClearSorts} variant=\"ghost\">\n                        Clear\n                    </Button>\n                    <Button onClick={handleAddSort} variant=\"outline\" disabled={eligibleColumns.length === 0}>\n                        Add <Plus />\n                    </Button>\n                    <Button onClick={handleApplySorts} variant=\"default\">\n                        Apply <Check />\n                    </Button>\n                </div>\n\n                {localSorts.length === 0 ? (\n                    <div className=\"text-sm text-muted-foreground\">\n                        No sorts available. Please add and apply sorts to start sorting.\n                    </div>\n                ) : (\n                    <DndContext onDragEnd={handleDragEnd}>\n                        <SortableContext items={localSorts.map((sort) => sort.alias)}>\n                            {localSorts.map((sort, index) => (\n                                <SortableItem key={sort.alias} id={sort.alias}>\n                                    <div className=\"flex items-center gap-2\">\n                                        <Select value={sort.alias} onValueChange={(value: string) => handleSortChange(index, value, sort.sort_operator)}>\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"Select column\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                {columns.map((column) => (\n                                                    <SelectItem key={column.alias} value={column.alias} disabled={!column.is_sortable}>\n                                                        {column.alias}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                        <Select value={sort.sort_operator} onValueChange={(value: SortOperator) => handleSortChange(index, sort.alias, value as SortOperator)}>\n                                            <SelectTrigger className=\"w-24\">\n                                                <SelectValue placeholder=\"Select direction\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                <SelectItem value={SortOperator.ASC}>Asc</SelectItem>\n                                                <SelectItem value={SortOperator.DESC}>Desc</SelectItem>\n                                            </SelectContent>\n                                        </Select>\n                                        <Button variant=\"ghost\" size=\"sm\" onClick={() => handleRemoveSort(index)}>\n                                            <Trash className=\"text-red-500\" />\n                                        </Button>\n                                    </div>\n                                </SortableItem>\n                            ))}\n                        </SortableContext>\n                    </DndContext>\n                )}\n            </PopoverContent>\n        </Popover>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/popover.tsx",
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/select.tsx",
      "content": "import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-full items-center justify-between rounded-md border bg-transparent px-3 py-2 text-sm shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&>span]:line-clamp-1\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"px-2 py-1.5 text-sm font-medium\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/sortable-item.tsx",
      "content": "import { JSX } from 'react';\nimport { GripVertical } from 'lucide-react';\nimport { CSS } from '@dnd-kit/utilities';\nimport {useSortable} from '@dnd-kit/sortable';\n\nconst SortableItem = ({ id, children }: { id: string; children: JSX.Element }) => {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n    };\n\n    return (\n        <div ref={setNodeRef} style={style} {...attributes} className=\"flex items-center justify-between cursor-grab\">\n            <div className=\"flex-grow\">\n                {children}\n            </div>\n            <div {...listeners} className=\"cursor-grab inline-block\">\n                <GripVertical className=\"w-4 h-4 mr-2\" />\n            </div>\n        </div>\n    );\n};\n\nexport { SortableItem };\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}