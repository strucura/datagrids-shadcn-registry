{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datagrid-advanced-filter-manager",
  "type": "registry:component",
  "title": "DataGrid Advanced Filter Manager",
  "description": "Advanced Filter Manager for your DataGrid",
  "dependencies": [
    "@strucura/datagrids-headless-react",
    "lucide-react",
    ".",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-popover",
    "lucide-react",
    "@strucura/datagrids-headless-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "calendar",
    "select",
    "card",
    "input"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/AdvancedFilterManager.tsx",
      "content": "\"use client\"\nimport React, { JSX, useEffect, useState } from 'react';\nimport FilterSetBuilder from './components/FilterSetBuilder';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/new-york/ui/popover';\nimport { Check, Filter, Plus } from 'lucide-react';\nimport { useDataGridContext, FilterSetOperator, FilterSetSchema, FilterOperator } from '@strucura/datagrids-headless-react';\n\n/**\n * AdvancedFilterManager component to manage and apply filter sets.\n *\n * @returns {JSX.Element} The AdvancedFilterManager component.\n */\nconst AdvancedFilterManager = <T,>(): JSX.Element => {\n\n    const { columns, filterSets, setFilterSets } = useDataGridContext<T>();\n\n    // Default filter set configuration\n    const defaultFilterSet = {\n        filter_set_operator: FilterSetOperator.And,\n        filters: [{ filter_operator: FilterOperator.Equals, alias: columns[0].alias, value: '' }],\n    };\n\n    // State to manage filter sets\n    const [workingFilterSets, setWorkingFilterSets] = useState<FilterSetSchema[]>(filterSets.length ? filterSets : [defaultFilterSet]);\n    // State to manage the visibility of the filter manager\n    const [isFilterManagerOpen, setIsFilterManagerOpen] = useState(false);\n\n    /**\n     * When the filter sets change in context, update the working filter sets\n     */\n    useEffect(() => {\n        setWorkingFilterSets(filterSets);\n    }, [filterSets])\n\n    /**\n     * Adds a new filter set to the list.\n     */\n    const addFilterSet = () => setWorkingFilterSets([...workingFilterSets, defaultFilterSet]);\n\n    /**\n     * Updates a specific filter set in the list.\n     *\n     * @param {number} index - Index of the filter set to update.\n     * @param {FilterSetSchema} updatedFilterSet - The updated filter set.\n     */\n    const updateFilterSet = (index: number, updatedFilterSet: FilterSetSchema) => {\n        const newFilterSets = [...workingFilterSets];\n        newFilterSets[index] = updatedFilterSet;\n        setWorkingFilterSets(newFilterSets);\n    };\n\n    /**\n     * Removes a specific filter set from the list.\n     *\n     * @param {number} index - Index of the filter set to remove.\n     */\n    const removeFilterSet = (index: number) => setWorkingFilterSets(workingFilterSets.filter((_, i) => i !== index));\n\n    /**\n     * Applies the current filter sets and closes the filter manager.\n     */\n    const applyFilterSets = () => {\n        setFilterSets(workingFilterSets.filter((set) => set.filters.length));\n        setIsFilterManagerOpen(false);\n    };\n\n    return (\n        <Popover open={isFilterManagerOpen} onOpenChange={setIsFilterManagerOpen}>\n            <PopoverTrigger asChild>\n                <Button variant=\"outline\">\n                    Filters <Filter />\n                </Button>\n            </PopoverTrigger>\n            <PopoverContent\n                className=\"flex max-h-[350px] w-[calc(100vw-(--spacing(12)))] min-w-60 origin-(--radix-popover-content-transform-origin) flex-col gap-3.5 overflow-y-auto p-4 sm:w-[48rem]\"\n                align=\"start\"\n            >\n                <>\n                    <div className=\"flex justify-end items-center border-b pb-4 mb-2 space-x-2\">\n                        <Button variant=\"outline\" onClick={addFilterSet}>\n                            Add<Plus />\n                        </Button>\n                        <Button variant=\"outline\" onClick={applyFilterSets}>\n                            Apply <Check />\n                        </Button>\n                    </div>\n                    <div className=\"flex flex-col gap-3.5 overflow-y-auto\">\n                        {workingFilterSets.map((filterSet, index) => (\n                            <FilterSetBuilder\n                                key={index}\n                                columns={columns}\n                                filterSet={filterSet}\n                                onFilterSetChange={(updatedFilterSet) => updateFilterSet(index, updatedFilterSet)}\n                                onRemove={() => removeFilterSet(index)}\n                            />\n                        ))}\n\n                        {workingFilterSets.length === 0 && (\n                            <div className=\"text-sm text-muted-foreground\">\n                                No filter sets available. Please add a filter set to start filtering.\n                            </div>\n                        )}\n                    </div>\n                </>\n            </PopoverContent>\n        </Popover>\n    );\n};\n\nexport default AdvancedFilterManager;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/components/DateFilterValue.tsx",
      "content": "import { Button } from \"@/registry/new-york/ui/button\";\nimport { Calendar } from \"@/registry/new-york/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/new-york/ui/popover';\nimport { Calendar as CalendarIcon } from 'lucide-react';\nimport { cn } from \"@/lib/utils\";\nimport { JSX } from 'react';\n\n/**\n * Props for the DateFilterValue component.\n *\n * @interface DateFilterValueProps\n * @property {string | undefined} value - The current value of the date input.\n * @property {(date: string | null) => void} onChange - Callback function to handle changes in the date input.\n */\ninterface DateFilterValueProps {\n    value: string | undefined;\n    onChange: (date: string | null) => void;\n}\n\n/**\n * DateFilterValue component allows users to select a date using a calendar popover.\n *\n * @param {DateFilterValueProps} props - The props for the component.\n * @returns {JSX.Element} The rendered DateFilterValue component.\n */\nconst DateFilterValue = ({ value, onChange }: DateFilterValueProps): JSX.Element => {\n\n    /**\n     * Converts a date string in 'YYYY-MM-DD' format to a Date object with the current time.\n     *\n     * @param {string} dateString - The date string to convert.\n     * @returns {Date} The Date object with the current time.\n     */\n    function convertToDateWithCurrentTime(dateString: string): Date {\n        const [year, month, day] = dateString.split('-').map(Number);\n        const now = new Date();\n        return new Date(year, month - 1, day, now.getHours(), now.getMinutes(), now.getSeconds(), now.getMilliseconds());\n    }\n\n    /**\n     * Formats a date string for presentation in 'Month Day, Year' format.\n     *\n     * @param {string | undefined} date - The date string to format.\n     * @returns {string | null} The formatted date string or null if the input is undefined.\n     */\n    const formatDateForPresentation = (date: string | undefined): string | null => {\n        if (!date) return null;\n        return new Intl.DateTimeFormat('en-US', { day: '2-digit', month: 'long', year: 'numeric' }).format(new Date(date));\n    }\n\n    /**\n     * Formats a Date object to 'YYYY-MM-DD' format for filtering.\n     *\n     * @param {Date | undefined} date - The Date object to format.\n     * @returns {string | null} The formatted date string or null if the input is undefined.\n     */\n    const formatDateForFilter = (date: Date | undefined): string | null => {\n        if (!date) return null;\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const dayOfMonth = String(date.getDate()).padStart(2, '0');\n        return `${year}-${month}-${dayOfMonth}`;\n    }\n\n    return (\n        <Popover>\n            <PopoverTrigger asChild>\n                <Button\n                    variant={\"outline\"}\n                    className={cn(\n                        \"w-[280x] justify-start text-left font-normal\",\n                        !value && \"text-muted-foreground\"\n                    )}\n                >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {value ? formatDateForPresentation(value) : <span>Pick a date</span>}\n                </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-auto p-0\">\n                <Calendar\n                    mode=\"single\"\n                    selected={value ? convertToDateWithCurrentTime(value) : undefined}\n                    onSelect={(date) => onChange(date ? formatDateForFilter(date) : null)}\n                />\n            </PopoverContent>\n        </Popover>\n    )\n};\n\nexport default DateFilterValue;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/components/FilterBuilder.tsx",
      "content": "\"use client\"\nimport { JSX, useMemo } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/new-york/ui/select';\nimport { Trash } from 'lucide-react';\nimport { useDataGridContext, FilterSchema } from '@strucura/datagrids-headless-react';\nimport { Button } from \"@/registry/new-york/ui/button\";\nimport FilterOperatorSelector from '@/registry/new-york/blocks/AdvancedFilterManager/FilterOperatorSelector';\nimport DateFilterValue from '@/registry/new-york/blocks/AdvancedFilterManager/DateFilterValue';\nimport TextFilterValue from '@/registry/new-york/blocks/AdvancedFilterManager/TextFilterValue';\nimport NumericFilterValue from '@/registry/new-york/blocks/AdvancedFilterManager/NumericFilterValue';\n\n/**\n * Props for the FilterBuilder component.\n *\n * @interface FilterProps\n * @property {FilterSchema} filter - The filter schema object.\n * @property {(filter: FilterSchema) => void} onFilterChange - Callback function to handle filter changes.\n * @property {() => void} onRemove - Callback function to handle filter removal.\n */\ninterface FilterProps {\n    filter: FilterSchema;\n    onFilterChange: (filter: FilterSchema) => void;\n    onRemove: () => void;\n}\n\n/**\n * FilterBuilder component renders a UI for building and managing filters.\n *\n * @param {FilterProps} props - The props for the component.\n * @returns {JSX.Element} The rendered filter builder component.\n */\nconst FilterBuilder = ({ filter, onFilterChange, onRemove }: FilterProps): JSX.Element => {\n    const { columns } = useDataGridContext();\n\n    const selectedColumn = useMemo(() => columns.find((column) => column.alias === filter.alias), [columns, filter.alias]);\n\n    /**\n     * Handles the change of the filter alias.\n     *\n     * @param {string} alias - The new alias for the filter.\n     */\n    const handleAliasChange = (alias: string) => {\n        onFilterChange({\n            ...filter,\n            alias,\n            value: undefined, // Empty the current value of the filter\n        });\n    };\n\n    return (\n        <div className=\"flex items-center space-x-2\">\n            <Select defaultValue={filter.alias} onValueChange={handleAliasChange}>\n                <SelectTrigger>\n                    <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                    {columns.map((column) => (\n                        <SelectItem key={column.alias} value={column.alias} disabled={!column.is_filterable}>\n                            {column.alias}\n                        </SelectItem>\n                    ))}\n                </SelectContent>\n            </Select>\n\n            <FilterOperatorSelector\n                filter={filter}\n                columns={columns}\n                onFilterOperatorChange={(filter_operator) => onFilterChange({ ...filter, filter_operator })}\n                onFilterChange={onFilterChange}\n            />\n\n            {(selectedColumn?.type === 'datetime' || selectedColumn?.type === 'date') && (\n                <DateFilterValue value={filter.value as string} onChange={(date) => onFilterChange({ ...filter, value: date })} />\n            )}\n\n            {selectedColumn?.type === 'string' && (\n                <TextFilterValue value={filter.value as string} onChange={(value) => onFilterChange({ ...filter, value })} />\n            )}\n\n            {selectedColumn?.type === 'number' && (\n                <NumericFilterValue value={filter.value as number} onChange={(value) => onFilterChange({ ...filter, value })} />\n            )}\n\n            <Button variant=\"outline\" onClick={onRemove} aria-label=\"Remove Filter\">\n                <Trash />\n            </Button>\n        </div>\n    );\n};\n\nexport default FilterBuilder;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/components/FilterOperatorSelector.tsx",
      "content": "\"use client\"\nimport { useMemo, useEffect, JSX } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/new-york/ui/select';\nimport { FilterSchema, FilterOperator } from '@strucura/datagrids-headless-react';\n\n/**\n * Props for the FilterOperatorSelector component.\n */\ninterface FilterOperatorSelectorProps {\n    filter: FilterSchema;\n    columns: { alias: string; type: string }[];\n    onFilterOperatorChange: (filterOperator: FilterOperator) => void;\n    onFilterChange: (filter: FilterSchema) => void;\n}\n\n/**\n * FilterOperatorSelector component allows users to select a filter operator based on the column type.\n * @param {FilterOperatorSelectorProps} props - The props for the component.\n * @returns {JSX.Element} The rendered FilterOperatorSelector component.\n */\nconst FilterOperatorSelector = ({ filter, columns, onFilterOperatorChange, onFilterChange }: FilterOperatorSelectorProps): JSX.Element => {\n    /**\n     * Finds the selected column based on the filter alias.\n     * @returns {Object | undefined} The selected column or undefined if not found.\n     */\n    const selectedColumn = useMemo(() => columns.find(column => column.alias === filter.alias), [columns, filter.alias]);\n    const columnType = selectedColumn?.type;\n\n    /**\n     * Determines the filter operators based on the column type.\n     * @returns {Array<FilterOperator>} The list of filter operators for the column type.\n     */\n    const filterOperators = useMemo(() => {\n        switch (columnType) {\n            case 'date':\n            case 'datetime':\n                return [\n                    FilterOperator.DateIs, FilterOperator.DateIsNot, FilterOperator.DateBefore,\n                    FilterOperator.DateAfter, FilterOperator.DateOnOrBefore, FilterOperator.DateOnOrAfter,\n                ];\n            case 'number':\n                return [\n                    FilterOperator.Equals, FilterOperator.DoesNotEqual, FilterOperator.LessThan,\n                    FilterOperator.LessThanOrEqualTo, FilterOperator.GreaterThan, FilterOperator.GreaterThanOrEqualTo,\n                ];\n            case 'boolean':\n                return [\n                    FilterOperator.Equals, FilterOperator.DoesNotEqual,\n                ];\n            case 'string':\n                return [\n                    FilterOperator.Equals, FilterOperator.DoesNotEqual, FilterOperator.StartsWith,\n                    FilterOperator.Contains, FilterOperator.DoesNotContain, FilterOperator.EndsWith,\n                ];\n            default:\n                return [];\n        }\n    }, [columnType]);\n\n    /**\n     * Labels for the filter operators.\n     * @type {Record<FilterOperator, string>}\n     */\n    const operatorLabels: Record<FilterOperator, string> = {\n        [FilterOperator.StartsWith]: 'Starts With',\n        [FilterOperator.Contains]: 'Contains',\n        [FilterOperator.DoesNotContain]: 'Does Not Contain',\n        [FilterOperator.EndsWith]: 'Ends With',\n        [FilterOperator.Equals]: 'Equals',\n        [FilterOperator.DoesNotEqual]: 'Does Not Equal',\n        [FilterOperator.In]: 'In',\n        [FilterOperator.NotIn]: 'Not In',\n        [FilterOperator.LessThan]: 'Less Than',\n        [FilterOperator.LessThanOrEqualTo]: 'Less Than Or Equal To',\n        [FilterOperator.GreaterThan]: 'Greater Than',\n        [FilterOperator.GreaterThanOrEqualTo]: 'Greater Than Or Equal To',\n        [FilterOperator.DateIs]: 'Date Is',\n        [FilterOperator.DateIsNot]: 'Date Is Not',\n        [FilterOperator.DateBefore]: 'Date Before',\n        [FilterOperator.DateAfter]: 'Date After',\n        [FilterOperator.DateOnOrBefore]: 'Date On Or Before',\n        [FilterOperator.DateOnOrAfter]: 'Date On Or After',\n    };\n\n    /**\n     * Effect to update the filter operator if the current operator is not compatible with the column type.\n     */\n    useEffect(() => {\n        if (!filterOperators.includes(filter.filter_operator as FilterOperator)) {\n            onFilterChange({\n                ...filter,\n                filter_operator: filterOperators[0],\n                value: undefined\n            });\n        }\n    }, [filterOperators, filter, onFilterChange]);\n\n    return (\n        <Select value={filter.filter_operator} onValueChange={(filter_operator: FilterOperator) => onFilterOperatorChange(filter_operator as FilterOperator)}>\n            <SelectTrigger><SelectValue /></SelectTrigger>\n            <SelectContent>\n                {filterOperators.map(operator => (\n                    <SelectItem key={operator} value={operator}>{operatorLabels[operator]}</SelectItem>\n                ))}\n            </SelectContent>\n        </Select>\n    );\n};\n\nexport default FilterOperatorSelector;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/components/FilterSetBuilder.tsx",
      "content": "import React, { JSX } from 'react';\nimport FilterBuilder from './FilterBuilder';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/registry/new-york/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/registry/new-york/ui/select';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { Plus, X } from 'lucide-react';\n\nimport {FilterSetOperator, FilterSetSchema, FilterSchema, ColumnSchema, FilterOperator} from '@strucura/datagrids-headless-react';\n\n/**\n * Props for the FilterSetBuilder component.\n */\ninterface FilterSetProps {\n    columns: ColumnSchema[];\n    filterSet: FilterSetSchema;\n    onFilterSetChange: (filterSet: FilterSetSchema) => void;\n    onRemove: () => void;\n}\n\n/**\n * FilterSetBuilder component to build and manage individual filter sets.\n *\n * @param {FilterSetProps} props - Props for the component.\n * @returns {JSX.Element} The FilterSetBuilder component.\n */\nconst FilterSetBuilder = ({ columns, filterSet, onFilterSetChange, onRemove }: FilterSetProps): JSX.Element => {\n    /**\n     * Adds a new filter to the filter set.\n     */\n    const addFilter = () => {\n        const newFilters = [...filterSet.filters, { alias: columns[0].alias, filter_operator: FilterOperator.Equals, value: '' }];\n        onFilterSetChange({ ...filterSet, filters: newFilters });\n    };\n\n    /**\n     * Updates a specific filter in the filter set.\n     *\n     * @param {number} index - Index of the filter to update.\n     * @param {FilterSchema} updatedFilter - The updated filter schema.\n     */\n    const updateFilter = (index: number, updatedFilter: FilterSchema) => {\n        const newFilters = [...filterSet.filters];\n        newFilters[index] = updatedFilter;\n        onFilterSetChange({ ...filterSet, filters: newFilters });\n    };\n\n    /**\n     * Removes a specific filter from the filter set.\n     *\n     * @param {number} index - Index of the filter to remove.\n     */\n    const removeFilter = (index: number) => {\n        const newFilters = filterSet.filters.filter((_, i) => i !== index);\n        onFilterSetChange({ ...filterSet, filters: newFilters });\n    };\n\n    return (\n        <Card>\n            <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                    <CardTitle>\n                        <Select\n                            aria-label=\"FilterBuilder Set Operator\"\n                            defaultValue={filterSet.filter_set_operator ?? FilterSetOperator.And}\n                            onValueChange={(value: FilterSetOperator) => onFilterSetChange({ ...filterSet, filter_set_operator: value as FilterSetOperator })}\n                        >\n                            <SelectTrigger>\n                                <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value={FilterSetOperator.And}>And</SelectItem>\n                                <SelectItem value={FilterSetOperator.Or}>Or</SelectItem>\n                            </SelectContent>\n                        </Select>\n                    </CardTitle>\n                    <div className={'flex items-center space-x-2'}>\n                        <Button variant=\"outline\" onClick={addFilter} aria-label={`Add Filter`}>\n                            <Plus />\n                        </Button>\n                        <Button variant=\"outline\" onClick={onRemove} aria-label={`Remove Filter Set`}>\n                            <X />\n                        </Button>\n                    </div>\n                </div>\n            </CardHeader>\n            <CardContent>\n                {filterSet.filters.map((filter, index) => (\n                    <div key={index} className=\"mb-2\">\n                        <FilterBuilder\n                            filter={filter}\n                            onFilterChange={(updatedFilter) => updateFilter(index, updatedFilter)}\n                            onRemove={() => removeFilter(index)}\n                        />\n                    </div>\n                ))}\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default FilterSetBuilder;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/components/NumericFilterValue.tsx",
      "content": "import { Input } from \"@/registry/new-york/ui/input\";\nimport { JSX } from 'react';\n\n/**\n * Props for the NumericFilterValue component.\n *\n * @interface NumericFilterValueProps\n * @property {number} value - The current value of the numeric input.\n * @property {(value: string) => void} onChange - Callback function to handle changes in the numeric input.\n */\ninterface NumericFilterValueProps {\n    value: number;\n    onChange: (value: string) => void;\n}\n\n/**\n * NumericFilterValue component renders a controlled input field for filtering numeric values.\n *\n * @param {NumericFilterValueProps} props - The props for the component.\n * @returns {JSX.Element} The rendered input component.\n */\nconst NumericFilterValue = ({ value, onChange }: NumericFilterValueProps): JSX.Element => (\n    <Input\n        type=\"number\"\n        placeholder=\"Filter numeric value\"\n        value={value} onChange={(e) => onChange(e.target.value)}\n    />\n);\n\nexport default NumericFilterValue;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/AdvancedFilterManager/components/TextFilterValue.tsx",
      "content": "import { Input } from \"@/registry/new-york/ui/input\";\nimport { JSX } from 'react';\n\n/**\n * Props for the TextFilterValue component.\n *\n * @interface TextFilterValueProps\n * @property {string} value - The current value of the text input.\n * @property {(value: string) => void} onChange - Callback function to handle changes in the text input.\n */\ninterface TextFilterValueProps {\n    value: string;\n    onChange: (value: string) => void;\n}\n\n/**\n * TextFilterValue component renders a controlled input field for filtering text values.\n *\n * @param {TextFilterValueProps} props - The props for the component.\n * @returns {JSX.Element} The rendered input component.\n */\nconst TextFilterValue = ({ value = '', onChange }: TextFilterValueProps): JSX.Element => (\n    <Input type={'text'}\n           placeholder=\"Filter text value\"\n           value={value}\n           onChange={(e) => onChange(e.target.value)}\n    />\n);\n\nexport default TextFilterValue;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/popover.tsx",
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}