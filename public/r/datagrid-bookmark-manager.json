{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datagrid-bookmark-manager",
  "type": "registry:component",
  "title": "DataGrid Bookmark Manager",
  "description": "Bookmark Manager for your DataGrid",
  "dependencies": [
    "@strucura/datagrids-headless-react",
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-popover",
    "lucide-react",
    "@strucura/datagrids-headless-react"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "input"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/BookmarkManager/BookmarkManager.tsx",
      "content": "\"use client\"\n\nimport React, { JSX, useState, useEffect } from 'react';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/registry/new-york/ui/popover';\nimport { Bookmark, Check, Save, Trash } from 'lucide-react';\nimport { useDataGridContext, BookmarkSchema } from '@strucura/datagrids-headless-react';\nimport { Input } from '@/registry/new-york/ui/input';\n\nexport default function BookmarkManager(): JSX.Element {\n    const [isOpen, setIsOpen] = useState(false);\n    const [bookmarkName, setBookmarkName] = useState('');\n    const { bookmarks, fetchBookmarks, storeBookmark, deleteBookmark, filterSets, setFilterSets, sorts, setSorts, columns, setColumns } = useDataGridContext();\n\n    useEffect(() => {\n        fetchBookmarks()\n    }, [fetchBookmarks]);\n\n    const handleSaveBookmark = async () => {\n        storeBookmark({\n            bookmarkName: bookmarkName,\n            filterSets: filterSets,\n            sorts: sorts,\n            columns: columns,\n        });\n    };\n\n    const handleApplyBookmark = (bookmark: BookmarkSchema) => {\n        setFilterSets(bookmark.filter_sets);\n        setSorts(bookmark.sorts);\n        setColumns(bookmark.columns);\n        setIsOpen(false);\n    };\n\n    const handleDeleteBookmark = (id: number) => {\n        deleteBookmark({\n            id,\n        })\n    };\n\n    return (\n        <Popover open={isOpen} onOpenChange={setIsOpen}>\n            <PopoverTrigger asChild>\n                <Button variant=\"outline\" className=\"ml-auto\">\n                    Bookmarks <Bookmark />\n                </Button>\n            </PopoverTrigger>\n            <PopoverContent\n                className=\"flex max-h-[350px] w-[calc(100vw-(--spacing(12)))] min-w-60 origin-(--radix-popover-content-transform-origin) flex-col gap-3.5 overflow-y-auto p-4 sm:w-[36rem]\"\n                align=\"end\"\n            >\n                <div className=\"flex flex-col gap-2 p-4\">\n                    <div className=\"flex items-center gap-2\">\n                        <Input value={bookmarkName} onChange={(e) => setBookmarkName(e.target.value)} placeholder=\"Bookmark name\" />\n                        <Button variant=\"outline\" onClick={handleSaveBookmark}>\n                            Save <Save />\n                        </Button>\n                    </div>\n                    <hr className={'mt-2 mb-2'} />\n\n                    {bookmarks.length === 0 ? (\n                        <span className=\"text-sm\">No bookmarks saved.</span>\n                    ) : (\n                        bookmarks.map((bookmark, index) => (\n                            <React.Fragment key={bookmark.id}>\n                                <div className=\"flex items-center justify-between\">\n                                    <span className={'text-sm'}>{bookmark.name}</span>\n                                    <div className=\"flex\">\n                                        <Button\n                                            size={'sm'}\n                                            variant=\"ghost\"\n                                            onClick={() => handleDeleteBookmark(bookmark.id)}\n                                            className=\"text-red-500\"\n                                        >\n                                            <Trash className=\"text-red-500\" />\n                                        </Button>\n                                        <Button size={'sm'} variant=\"outline\" onClick={() => handleApplyBookmark(bookmark)}>\n                                            Apply <Check />\n                                        </Button>\n                                    </div>\n                                </div>\n\n                                {index < bookmarks.length - 1 && <hr className={'py-0'} />}\n                            </React.Fragment>\n                        ))\n                    )}\n                </div>\n            </PopoverContent>\n        </Popover>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/popover.tsx",
      "content": "import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Popover({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\n}\n\nfunction PopoverTrigger({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\n}\n\nfunction PopoverContent({\n  className,\n  align = \"center\",\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\n  return (\n    <PopoverPrimitive.Portal>\n      <PopoverPrimitive.Content\n        data-slot=\"popover-content\"\n        align={align}\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\n          className\n        )}\n        {...props}\n      />\n    </PopoverPrimitive.Portal>\n  )\n}\n\nfunction PopoverAnchor({\n  ...props\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\n}\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}