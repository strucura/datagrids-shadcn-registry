{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datagrid",
  "type": "registry:component",
  "title": "DataGrid",
  "description": "The core datagrid component",
  "dependencies": [
    "@strucura/datagrids-headless-react",
    "lucide-react",
    "@strucura/datagrids-headless-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "lucide-react",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-dropdown-menu"
  ],
  "registryDependencies": [
    "button",
    "dropdown-menu",
    "table",
    "checkbox"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/DataGrid/DataGrid.tsx",
      "content": "\"use client\"\n\nimport React, { JSX, useEffect, useRef } from 'react';\nimport { Table, TableBody, TableCell, TableHeader, TableRow } from '@/registry/new-york/ui/table';\nimport {DataGridSchema, DataGridProvider, useDataGridContext, ColumnSchema} from '@strucura/datagrids-headless-react';\nimport Toolbar from \"@/registry/new-york/blocks/DataGrid/Toolbar/Toolbar\";\nimport ActionHeader from '@/registry/new-york/blocks/DataGrid/Headers/ActionHeader';\nimport ColumnSchemaHeader from \"@/registry/new-york/blocks/DataGrid/Headers/ColumnSchemaHeader\";\nimport RowSelectionHeader from \"@/registry/new-york/blocks/DataGrid/Headers/RowSelectionHeader\";\nimport ColumnSchemaCell from \"@/registry/new-york/blocks/DataGrid/Cells/ColumnSchemaCell\";\nimport RowSelectionCell from \"@/registry/new-york/blocks/DataGrid/Cells/RowSelectionCell\";\nimport PreviousButton from \"@/registry/new-york/blocks/DataGrid/Pagination/PreviousButton\";\nimport NextButton from \"@/registry/new-york/blocks/DataGrid/Pagination/NextButton\";\nimport PageSizeDropdown from \"@/registry/new-york/blocks/DataGrid/Pagination/PageSizeDropdown\";\nimport ActionCell from \"@/registry/new-york/blocks/DataGrid/Cells/ActionCell\";\n\ninterface DataGridProps {\n    schema: DataGridSchema;\n    toolbarLeft?: JSX.Element;\n    toolbarRight?: JSX.Element;\n    localStorageKeyPrefix?: string; // Optional key for local storage to save state\n}\n\nfunction DataGridContent<T>({ schema, toolbarLeft, toolbarRight }: DataGridProps) {\n    const { data, columns } = useDataGridContext<T>();\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (scrollAreaRef.current) {\n            scrollAreaRef.current.scrollTo({ top: 0, behavior: 'smooth' });\n        }\n    }, [data]);\n\n    return (\n        <div className=\"w-full\">\n            <Toolbar\n                toolbarLeft={\n                    <>\n                        {toolbarLeft}\n                    </>\n                }\n                toolbarRight={\n                    <>\n                        {toolbarRight}\n                    </>\n                }\n            />\n            <div className=\"rounded-md border overflow-hidden h-[400px]\">\n                <div className=\"h-full relative w-full overflow-auto\" ref={scrollAreaRef}>\n                    <Table>\n                        <TableHeader className=\"sticky top-0 bg-muted z-10\">\n                            <TableRow>\n                                <RowSelectionHeader />\n                                {columns.map((column: ColumnSchema) => (\n                                    <ColumnSchemaHeader column={column} key={column.alias} />\n                                ))}\n                                <ActionHeader />\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {data.length ? (\n                                data.map((row, rowIndex) => (\n                                    <TableRow key={rowIndex}>\n                                        <RowSelectionCell row={row} />\n\n                                        {columns.map((column) => (\n                                            <ColumnSchemaCell row={row} column={column} key={column.alias} />\n                                        ))}\n\n                                        <ActionCell row={row} />\n                                    </TableRow>\n                                ))\n                            ) : (\n                                <TableRow>\n                                    <TableCell colSpan={schema.columns.length} className=\"h-24 text-center\">\n                                        No results.\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </div>\n            </div>\n            <div className=\"flex items-center justify-between space-x-2 py-4\">\n                <PreviousButton />\n                <PageSizeDropdown />\n                <NextButton />\n            </div>\n        </div>\n    );\n}\n\nexport function DataGrid<T>(props: DataGridProps) {\n    return (\n        <DataGridProvider schema={props.schema}>\n            <DataGridContent<T> {...props} />\n        </DataGridProvider>\n    );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Cells/ActionCell.tsx",
      "content": "\"use client\"\nimport React from 'react';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/registry/new-york/ui/dropdown-menu';\nimport { MoreHorizontal } from 'lucide-react';\nimport { TableCell } from '@/registry/new-york/ui/table';\nimport { useDataGridContext } from '@strucura/datagrids-headless-react';\n\ninterface ActionCellProps<T> {\n    row: T;\n}\n\nconst ActionCell = <T,>({ row }: ActionCellProps<T>) => {\n    const { runInlineAction, inlineActions, hasInlineActions } = useDataGridContext<T>();\n\n    if (!hasInlineActions) {\n        return null;\n    }\n\n    const handleActionClick = (action: string) => {\n        runInlineAction({\n            action: action,\n            selectedRow: row,\n            onSuccess: (response) => {\n                console.log('Action successful:', response);\n            },\n            onError: (error) => {\n                console.error('Action failed:', error);\n            },\n        });\n    }\n\n    return (\n        <TableCell className={'py-1'}>\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                        <span className=\"sr-only\">Open menu</span>\n                        <MoreHorizontal />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    {inlineActions.map((action) => (\n                        <DropdownMenuItem\n                            key={action.name}\n                            onClick={() => handleActionClick(action.name)}\n                        >\n                            {action.name}\n                        </DropdownMenuItem>\n                    ))}\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </TableCell>\n    );\n};\n\nexport default ActionCell;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Cells/ColumnSchemaCell.tsx",
      "content": "\"use client\"\nimport React from 'react';\nimport { TableCell } from '@/registry/new-york/ui/table';\nimport {ColumnSchema} from '@strucura/datagrids-headless-react';\n\ninterface BasicCellProps<T> {\n    row: T;\n    column: ColumnSchema\n}\n\nconst ColumnSchemaCell = <T,>({ row, column }: BasicCellProps<T>) => {\n    if (column.is_hidden) {\n        return;\n    }\n\n    return (\n        <TableCell key={column.alias} className={'py-1 px-4'}>\n            {String(row[column.alias as keyof T] ?? '')}\n        </TableCell>\n    );\n};\n\nexport default ColumnSchemaCell;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Cells/RowSelectionCell.tsx",
      "content": "\"use client\"\nimport React from 'react';\nimport { Checkbox } from '@/registry/new-york/ui/checkbox';\nimport { useDataGridContext } from '@strucura/datagrids-headless-react';\nimport { TableCell } from '@/registry/new-york/ui/table';\n\ninterface RowSelectionCellProps<T> {\n    row: T;\n}\n\nconst RowSelectionCell = <T,>({ row }: RowSelectionCellProps<T>) => {\n    const {toggleRowSelection, hasBulkActions, selectedRows  } = useDataGridContext<T>();\n\n    const handleRowSelectChange = (row: T) => {\n        toggleRowSelection(row)\n    };\n\n    console.log('hasBulkActions', hasBulkActions);\n\n    if (!hasBulkActions) {\n        return null;\n    }\n\n    console.log('hit');\n\n    return (\n        <TableCell className={'py-1'}>\n            <Checkbox checked={selectedRows.includes(row)} onClick={() => handleRowSelectChange(row)} />\n        </TableCell>\n    );\n};\n\nexport default RowSelectionCell;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Headers/ActionHeader.tsx",
      "content": "\"use client\"\nimport React from 'react';\nimport { TableHead } from '@/registry/new-york/ui/table';\nimport {useDataGridContext} from '@strucura/datagrids-headless-react';\n\n\nconst ActionHeader = () => {\n    const { hasBulkActions } = useDataGridContext();\n\n    if (!hasBulkActions) {\n        return null;\n    }\n\n    return (\n        <TableHead>Actions</TableHead>\n    )\n}\n\nexport default ActionHeader;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Headers/ColumnSchemaHeader.tsx",
      "content": "\"use client\"\n\nimport React from 'react';\nimport { TableHead } from '@/registry/new-york/ui/table';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { ArrowDown, ArrowUp, ArrowUpDown } from 'lucide-react';\nimport {useDataGridContext, SortOperator, ColumnSchema } from '@strucura/datagrids-headless-react';\n\ninterface BasicHeaderProps {\n    column: ColumnSchema;\n}\n\nconst ColumnSchemaHeader = ({ column } : BasicHeaderProps) => {\n    const { sorts, setSorts, } = useDataGridContext();\n\n    if (column.is_hidden) {\n        return;\n    }\n\n    const handleSort = (columnAlias: string) => {\n        const sort = sorts.find((sort) => sort.alias === columnAlias);\n\n        if (sort?.sort_operator === SortOperator.ASC) {\n            setSorts([\n                { alias: columnAlias, sort_operator: SortOperator.DESC },\n            ])\n        } else if (sort?.sort_operator === SortOperator.DESC) {\n            setSorts([])\n        } else {\n            setSorts([\n                { alias: columnAlias, sort_operator: SortOperator.ASC },\n            ])\n        }\n    };\n\n    const getSortIcon = (columnAlias: string) => {\n        const sort = sorts.find((sort) => sort.alias === columnAlias);\n        if (sort?.sort_operator === SortOperator.ASC) {\n            return <ArrowUp />;\n        } else if (sort?.sort_operator === SortOperator.DESC) {\n            return <ArrowDown />;\n        } else {\n            return <ArrowUpDown />;\n        }\n    };\n\n    return (\n        <TableHead key={column.alias} className=\"text-left\">\n            {column.is_sortable ? (\n                <Button variant=\"ghost\" className=\"p-0\" onClick={() => handleSort(column.alias)}>\n                    {column.alias} {getSortIcon(column.alias)}\n                </Button>\n            ) : (\n                column.alias\n            )}\n\n        </TableHead>\n    )\n}\n\nexport default ColumnSchemaHeader;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Headers/RowSelectionHeader.tsx",
      "content": "\"use client\"\nimport React from 'react';\nimport { TableHead } from '@/registry/new-york/ui/table';\nimport { Checkbox } from '@/registry/new-york/ui/checkbox';\nimport { useDataGridContext } from '@strucura/datagrids-headless-react';\n\n\nconst RowSelectionHeader = () => {\n    const { data, selectedRows, setSelectedRows, hasBulkActions } = useDataGridContext();\n\n    const allRowsSelected = data.length > 0 && selectedRows.length === data.length;\n\n    const handleSelectAllChange = () => {\n        setSelectedRows(allRowsSelected ? [] : data);\n    };\n\n    if (!hasBulkActions) {\n        return null;\n    }\n\n    return (\n        <TableHead>\n            <Checkbox checked={allRowsSelected} onClick={handleSelectAllChange} />\n        </TableHead>\n    )\n}\n\nexport default RowSelectionHeader;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Pagination/NextButton.tsx",
      "content": "\"use client\"\n\nimport React from 'react';\nimport { Button } from '@/registry/new-york/ui/button';\nimport {useDataGridContext, } from '@strucura/datagrids-headless-react';\nimport { ArrowRight } from 'lucide-react';\n\nconst NextButton = () => {\n    const { hasNextPage, goToNextPage } = useDataGridContext();\n\n    return (\n        <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => goToNextPage}\n            disabled={hasNextPage}\n        >\n            Next <ArrowRight />\n        </Button>\n    )\n}\n\nexport default NextButton;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Pagination/PageSizeDropdown.tsx",
      "content": "\"use client\"\n\nimport React from 'react';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/registry/new-york/ui/dropdown-menu';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { ChevronDown } from 'lucide-react';\nimport {useDataGridContext} from '@strucura/datagrids-headless-react';\n\nconst PageSizeDropdown = () => {\n    const { pagination, setPagination } = useDataGridContext();\n\n    const handlePageSizeChange = (pageSize: number) => {\n        setPagination((prev) => ({ ...prev, perPage: pageSize, currentPage: 1 }));\n    };\n\n    return (\n        <div className=\"flex items-center space-x-2\">\n            <span className={'text-sm'}>Page Size: </span>\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                        { pagination.perPage} <ChevronDown className=\"ml-0 h-4 w-4\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                    {[10, 25, 50, 100].map((size) => (\n                        <DropdownMenuItem key={size} onClick={() => handlePageSizeChange(size)}>\n                            {size}\n                        </DropdownMenuItem>\n                    ))}\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n    );\n};\n\nexport default PageSizeDropdown;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Pagination/PreviousButton.tsx",
      "content": "\"use client\"\nimport React from 'react';\nimport { Button } from '@/registry/new-york/ui/button';\nimport { ArrowLeft } from 'lucide-react';\nimport { useDataGridContext } from '@strucura/datagrids-headless-react';\n\nconst PreviousButton = () => {\n    const { hasPreviousPage, goToPreviousPage } = useDataGridContext();\n\n    return (\n        <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => goToPreviousPage}\n            disabled={hasPreviousPage}\n        >\n            <ArrowLeft /> Previous\n        </Button>\n    )\n}\n\nexport default PreviousButton;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/DataGrid/Toolbar/Toolbar.tsx",
      "content": "\"use client\"\nimport React, { JSX } from 'react';\n\ninterface ToolbarProps {\n    toolbarLeft?: JSX.Element;\n    toolbarRight?: JSX.Element;\n}\n\nconst Toolbar = ({toolbarLeft, toolbarRight}: ToolbarProps): JSX.Element => {\n    return (\n        <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center space-x-2\">\n                {toolbarLeft}\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n                {toolbarRight}\n            </div>\n        </div>\n    )\n}\n\nexport default Toolbar;\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/ui/table.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Table({ className, ...props }: React.ComponentProps<\"table\">) {\n  return (\n    <div\n      data-slot=\"table-container\"\n      className=\"relative w-full overflow-x-auto\"\n    >\n      <table\n        data-slot=\"table\"\n        className={cn(\"w-full caption-bottom text-sm\", className)}\n        {...props}\n      />\n    </div>\n  )\n}\n\nfunction TableHeader({ className, ...props }: React.ComponentProps<\"thead\">) {\n  return (\n    <thead\n      data-slot=\"table-header\"\n      className={cn(\"[&_tr]:border-b\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableBody({ className, ...props }: React.ComponentProps<\"tbody\">) {\n  return (\n    <tbody\n      data-slot=\"table-body\"\n      className={cn(\"[&_tr:last-child]:border-0\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction TableFooter({ className, ...props }: React.ComponentProps<\"tfoot\">) {\n  return (\n    <tfoot\n      data-slot=\"table-footer\"\n      className={cn(\n        \"bg-muted/50 border-t font-medium [&>tr]:last:border-b-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableRow({ className, ...props }: React.ComponentProps<\"tr\">) {\n  return (\n    <tr\n      data-slot=\"table-row\"\n      className={cn(\n        \"hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableHead({ className, ...props }: React.ComponentProps<\"th\">) {\n  return (\n    <th\n      data-slot=\"table-head\"\n      className={cn(\n        \"text-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCell({ className, ...props }: React.ComponentProps<\"td\">) {\n  return (\n    <td\n      data-slot=\"table-cell\"\n      className={cn(\n        \"p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction TableCaption({\n  className,\n  ...props\n}: React.ComponentProps<\"caption\">) {\n  return (\n    <caption\n      data-slot=\"table-caption\"\n      className={cn(\"text-muted-foreground mt-4 text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/checkbox.tsx",
      "content": "import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3.5\" />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry/new-york/ui/dropdown-menu.tsx",
      "content": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}